// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fileserver/fileserver.proto

package fileserver

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StatusCode int32

const (
	StatusCode_Unknown StatusCode = 0
	StatusCode_Ok      StatusCode = 1
	StatusCode_Failed  StatusCode = 2
)

var StatusCode_name = map[int32]string{
	0: "Unknown",
	1: "Ok",
	2: "Failed",
}

var StatusCode_value = map[string]int32{
	"Unknown": 0,
	"Ok":      1,
	"Failed":  2,
}

func (x StatusCode) String() string {
	return proto.EnumName(StatusCode_name, int32(x))
}

func (StatusCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_925fe604dd34126f, []int{0}
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_925fe604dd34126f, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type Chunk struct {
	Content              []byte   `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Chunk) Reset()         { *m = Chunk{} }
func (m *Chunk) String() string { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()    {}
func (*Chunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_925fe604dd34126f, []int{1}
}

func (m *Chunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Chunk.Unmarshal(m, b)
}
func (m *Chunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Chunk.Marshal(b, m, deterministic)
}
func (m *Chunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chunk.Merge(m, src)
}
func (m *Chunk) XXX_Size() int {
	return xxx_messageInfo_Chunk.Size(m)
}
func (m *Chunk) XXX_DiscardUnknown() {
	xxx_messageInfo_Chunk.DiscardUnknown(m)
}

var xxx_messageInfo_Chunk proto.InternalMessageInfo

func (m *Chunk) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type FileName struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileName) Reset()         { *m = FileName{} }
func (m *FileName) String() string { return proto.CompactTextString(m) }
func (*FileName) ProtoMessage()    {}
func (*FileName) Descriptor() ([]byte, []int) {
	return fileDescriptor_925fe604dd34126f, []int{2}
}

func (m *FileName) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileName.Unmarshal(m, b)
}
func (m *FileName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileName.Marshal(b, m, deterministic)
}
func (m *FileName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileName.Merge(m, src)
}
func (m *FileName) XXX_Size() int {
	return xxx_messageInfo_FileName.Size(m)
}
func (m *FileName) XXX_DiscardUnknown() {
	xxx_messageInfo_FileName.DiscardUnknown(m)
}

var xxx_messageInfo_FileName proto.InternalMessageInfo

func (m *FileName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type FileInfo struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Size                 int64    `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	IsDir                bool     `protobuf:"varint,3,opt,name=isDir,proto3" json:"isDir,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileInfo) Reset()         { *m = FileInfo{} }
func (m *FileInfo) String() string { return proto.CompactTextString(m) }
func (*FileInfo) ProtoMessage()    {}
func (*FileInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_925fe604dd34126f, []int{3}
}

func (m *FileInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileInfo.Unmarshal(m, b)
}
func (m *FileInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileInfo.Marshal(b, m, deterministic)
}
func (m *FileInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileInfo.Merge(m, src)
}
func (m *FileInfo) XXX_Size() int {
	return xxx_messageInfo_FileInfo.Size(m)
}
func (m *FileInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FileInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FileInfo proto.InternalMessageInfo

func (m *FileInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FileInfo) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *FileInfo) GetIsDir() bool {
	if m != nil {
		return m.IsDir
	}
	return false
}

type FileInfoResponse struct {
	Files                []*FileInfo `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *FileInfoResponse) Reset()         { *m = FileInfoResponse{} }
func (m *FileInfoResponse) String() string { return proto.CompactTextString(m) }
func (*FileInfoResponse) ProtoMessage()    {}
func (*FileInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_925fe604dd34126f, []int{4}
}

func (m *FileInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileInfoResponse.Unmarshal(m, b)
}
func (m *FileInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileInfoResponse.Marshal(b, m, deterministic)
}
func (m *FileInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileInfoResponse.Merge(m, src)
}
func (m *FileInfoResponse) XXX_Size() int {
	return xxx_messageInfo_FileInfoResponse.Size(m)
}
func (m *FileInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FileInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FileInfoResponse proto.InternalMessageInfo

func (m *FileInfoResponse) GetFiles() []*FileInfo {
	if m != nil {
		return m.Files
	}
	return nil
}

type Status struct {
	Code                 StatusCode `protobuf:"varint,1,opt,name=Code,proto3,enum=fileserver.StatusCode" json:"Code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_925fe604dd34126f, []int{5}
}

func (m *Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status.Unmarshal(m, b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status.Marshal(b, m, deterministic)
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return xxx_messageInfo_Status.Size(m)
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetCode() StatusCode {
	if m != nil {
		return m.Code
	}
	return StatusCode_Unknown
}

// The request message containing the user's name.
type HelloRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloRequest) Reset()         { *m = HelloRequest{} }
func (m *HelloRequest) String() string { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()    {}
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_925fe604dd34126f, []int{6}
}

func (m *HelloRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloRequest.Unmarshal(m, b)
}
func (m *HelloRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloRequest.Marshal(b, m, deterministic)
}
func (m *HelloRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloRequest.Merge(m, src)
}
func (m *HelloRequest) XXX_Size() int {
	return xxx_messageInfo_HelloRequest.Size(m)
}
func (m *HelloRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HelloRequest proto.InternalMessageInfo

func (m *HelloRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The response message containing the greetings
type HelloReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloReply) Reset()         { *m = HelloReply{} }
func (m *HelloReply) String() string { return proto.CompactTextString(m) }
func (*HelloReply) ProtoMessage()    {}
func (*HelloReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_925fe604dd34126f, []int{7}
}

func (m *HelloReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloReply.Unmarshal(m, b)
}
func (m *HelloReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloReply.Marshal(b, m, deterministic)
}
func (m *HelloReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloReply.Merge(m, src)
}
func (m *HelloReply) XXX_Size() int {
	return xxx_messageInfo_HelloReply.Size(m)
}
func (m *HelloReply) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloReply.DiscardUnknown(m)
}

var xxx_messageInfo_HelloReply proto.InternalMessageInfo

func (m *HelloReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterEnum("fileserver.StatusCode", StatusCode_name, StatusCode_value)
	proto.RegisterType((*Empty)(nil), "fileserver.Empty")
	proto.RegisterType((*Chunk)(nil), "fileserver.Chunk")
	proto.RegisterType((*FileName)(nil), "fileserver.FileName")
	proto.RegisterType((*FileInfo)(nil), "fileserver.FileInfo")
	proto.RegisterType((*FileInfoResponse)(nil), "fileserver.FileInfoResponse")
	proto.RegisterType((*Status)(nil), "fileserver.Status")
	proto.RegisterType((*HelloRequest)(nil), "fileserver.HelloRequest")
	proto.RegisterType((*HelloReply)(nil), "fileserver.HelloReply")
}

func init() { proto.RegisterFile("fileserver/fileserver.proto", fileDescriptor_925fe604dd34126f) }

var fileDescriptor_925fe604dd34126f = []byte{
	// 384 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x6f, 0x8b, 0xd3, 0x40,
	0x10, 0xc6, 0xb3, 0x6d, 0xf3, 0xc7, 0xb9, 0x43, 0xe2, 0x70, 0x1c, 0x21, 0x8a, 0xc4, 0x7d, 0x21,
	0xa1, 0xe0, 0x29, 0x3d, 0x41, 0x7c, 0x73, 0x6f, 0x7a, 0x9e, 0x27, 0x88, 0x42, 0x8e, 0x7e, 0x80,
	0x48, 0xa7, 0x1a, 0xba, 0xd9, 0x8d, 0xd9, 0xad, 0x25, 0x7e, 0x6c, 0x3f, 0x81, 0x64, 0xd3, 0xd8,
	0x48, 0xf3, 0x6e, 0x66, 0xe7, 0x37, 0xb3, 0xcf, 0x3e, 0x3b, 0xf0, 0x74, 0x53, 0x08, 0xd2, 0x54,
	0xff, 0xa2, 0xfa, 0xf5, 0x31, 0xbc, 0xaa, 0x6a, 0x65, 0x14, 0xc2, 0xf1, 0x84, 0xfb, 0xe0, 0x7e,
	0x28, 0x2b, 0xd3, 0xf0, 0x17, 0xe0, 0x2e, 0x7f, 0xec, 0xe4, 0x16, 0x23, 0xf0, 0x97, 0x4a, 0x1a,
	0x92, 0x26, 0x62, 0x09, 0x4b, 0xcf, 0xb3, 0x3e, 0xe5, 0xcf, 0x21, 0xb8, 0x2b, 0x04, 0x7d, 0xc9,
	0x4b, 0x42, 0x84, 0x99, 0xcc, 0x4b, 0xb2, 0xc8, 0xa3, 0xcc, 0xc6, 0xfc, 0xbe, 0xab, 0x7f, 0x92,
	0x1b, 0x35, 0x56, 0x6f, 0xcf, 0x74, 0xf1, 0x9b, 0xa2, 0x49, 0xc2, 0xd2, 0x69, 0x66, 0x63, 0xbc,
	0x00, 0xb7, 0xd0, 0xb7, 0x45, 0x1d, 0x4d, 0x13, 0x96, 0x06, 0x59, 0x97, 0xf0, 0x1b, 0x08, 0xfb,
	0x49, 0x19, 0xe9, 0x4a, 0x49, 0x4d, 0x38, 0x07, 0xd7, 0xea, 0x8e, 0x58, 0x32, 0x4d, 0xcf, 0x16,
	0x17, 0x57, 0x83, 0x77, 0xfd, 0x83, 0x3b, 0x84, 0xbf, 0x05, 0xef, 0xc1, 0xe4, 0x66, 0xa7, 0x71,
	0x0e, 0xb3, 0xa5, 0x5a, 0x77, 0x3a, 0x1e, 0x2f, 0x2e, 0x87, 0x4d, 0x1d, 0xd1, 0x56, 0x33, 0xcb,
	0x70, 0x0e, 0xe7, 0xf7, 0x24, 0x84, 0xca, 0xe8, 0xe7, 0x8e, 0xb4, 0x19, 0x7d, 0xe3, 0x4b, 0x80,
	0x03, 0x53, 0x89, 0xa6, 0xf5, 0xaa, 0x24, 0xad, 0xf3, 0xef, 0x3d, 0xd4, 0xa7, 0xf3, 0x57, 0x00,
	0xc7, 0xf9, 0x78, 0x06, 0xfe, 0x4a, 0x6e, 0xa5, 0xda, 0xcb, 0xd0, 0x41, 0x0f, 0x26, 0x5f, 0xb7,
	0x21, 0x43, 0x00, 0xef, 0x2e, 0x2f, 0x04, 0xad, 0xc3, 0xc9, 0xe2, 0x0f, 0x03, 0xff, 0x63, 0x4d,
	0x64, 0xa8, 0xc6, 0x1b, 0x08, 0x1e, 0xf2, 0xc6, 0xde, 0x82, 0xd1, 0x50, 0xf0, 0x50, 0x5c, 0x7c,
	0x39, 0x52, 0xa9, 0x44, 0xc3, 0x1d, 0x7c, 0x0f, 0xb3, 0xcf, 0x85, 0x36, 0xf8, 0x64, 0x48, 0xd8,
	0x4f, 0x8e, 0x9f, 0x8d, 0x9a, 0x76, 0x70, 0x98, 0x3b, 0x78, 0x0d, 0xde, 0xaa, 0x12, 0x2a, 0x5f,
	0xff, 0xdf, 0x6c, 0x17, 0x23, 0xc6, 0x53, 0xf3, 0xb8, 0x93, 0x32, 0x7c, 0x07, 0xc1, 0xad, 0xda,
	0x4b, 0xdb, 0x76, 0xf2, 0x2b, 0xed, 0xb2, 0xc4, 0xa7, 0xc3, 0xb8, 0xf3, 0x86, 0x7d, 0xf3, 0xec,
	0x3a, 0x5e, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xb0, 0xd4, 0x76, 0xdb, 0xad, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GreeterClient interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FileInfoResponse, error)
	Upload(ctx context.Context, opts ...grpc.CallOption) (Greeter_UploadClient, error)
	Download(ctx context.Context, in *FileName, opts ...grpc.CallOption) (Greeter_DownloadClient, error)
}

type greeterClient struct {
	cc *grpc.ClientConn
}

func NewGreeterClient(cc *grpc.ClientConn) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/fileserver.Greeter/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FileInfoResponse, error) {
	out := new(FileInfoResponse)
	err := c.cc.Invoke(ctx, "/fileserver.Greeter/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) Upload(ctx context.Context, opts ...grpc.CallOption) (Greeter_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Greeter_serviceDesc.Streams[0], "/fileserver.Greeter/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterUploadClient{stream}
	return x, nil
}

type Greeter_UploadClient interface {
	Send(*Chunk) error
	CloseAndRecv() (*Status, error)
	grpc.ClientStream
}

type greeterUploadClient struct {
	grpc.ClientStream
}

func (x *greeterUploadClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterUploadClient) CloseAndRecv() (*Status, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Status)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) Download(ctx context.Context, in *FileName, opts ...grpc.CallOption) (Greeter_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Greeter_serviceDesc.Streams[1], "/fileserver.Greeter/Download", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greeter_DownloadClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type greeterDownloadClient struct {
	grpc.ClientStream
}

func (x *greeterDownloadClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreeterServer is the server API for Greeter service.
type GreeterServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	List(context.Context, *Empty) (*FileInfoResponse, error)
	Upload(Greeter_UploadServer) error
	Download(*FileName, Greeter_DownloadServer) error
}

// UnimplementedGreeterServer can be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (*UnimplementedGreeterServer) SayHello(ctx context.Context, req *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (*UnimplementedGreeterServer) List(ctx context.Context, req *Empty) (*FileInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedGreeterServer) Upload(srv Greeter_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (*UnimplementedGreeterServer) Download(req *FileName, srv Greeter_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fileserver.Greeter/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fileserver.Greeter/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).List(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).Upload(&greeterUploadServer{stream})
}

type Greeter_UploadServer interface {
	SendAndClose(*Status) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type greeterUploadServer struct {
	grpc.ServerStream
}

func (x *greeterUploadServer) SendAndClose(m *Status) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterUploadServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Greeter_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileName)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServer).Download(m, &greeterDownloadServer{stream})
}

type Greeter_DownloadServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type greeterDownloadServer struct {
	grpc.ServerStream
}

func (x *greeterDownloadServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fileserver.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Greeter_SayHello_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Greeter_List_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _Greeter_Upload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Download",
			Handler:       _Greeter_Download_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "fileserver/fileserver.proto",
}
